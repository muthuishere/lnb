# GoReleaser-based Taskfile
version: '3'

# Enable .env file loading
dotenv: ['.env']

vars:
  # Repository and environment configuration
  REPO_OWNER: "muthuishere"
  REPO_NAME: "lnb"
  GITHUB_REPO: "{{.REPO_OWNER}}/{{.REPO_NAME}}"
  GITHUB_SECRET_ENVIRONMENT: "dev"
  
  # Use APP_NAME from .env as BIN_NAME for backward compatibility
  BIN_NAME: "lnb"
  # Release version - read from versions.txt (single source of truth)
  RELEASE_VERSION:
    sh: cat versions.txt

tasks:
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf dist
      - mkdir -p dist

  build:
    desc: Build for current platform
    cmds:
      - go build -o dist/{{.BIN_NAME}} ./cmd/lnb

  build:all:
    desc: Build for all platforms using GoReleaser
    cmds:
      - goreleaser build --clean --snapshot

  local:
    desc: Build binary
    cmds:
      - go build -o ./lnb ./cmd/lnb

  test:build:
    desc: Build test binary for integration tests
    cmds:
      - go build -o dist/test-lnb ./cmd/lnb

  test:integration:
    desc: Run integration tests using Go unit tests
    deps: [test:build]
    cmds:
      - cd cmd/lnb && go test -v -run TestLnbIntegration

  test:unit:
    desc: Run only the main_test.go unit tests
    deps: [test:build]
    cmds:
      - cd cmd/lnb && go test -v -run TestLnb

  test:all:
    desc: Run all tests (unit and integration)
    cmds:
      - task: test:unit
      - task: test:integration


  install:
    desc: Install LNB locally
    deps: [build:all]
    cmds:
      - task: build
      - ./dist/{{.BIN_NAME}} ./dist/{{.BIN_NAME}} install

  remove:
    desc: Remove LNB from local system
    cmds:
      - task: build
      - ./dist/{{.BIN_NAME}} ./dist/{{.BIN_NAME}} remove

  # GoReleaser commands
  check:
    desc: Check GoReleaser configuration
    cmds:
      - goreleaser check


  version:
    desc: Show current version
    cmds:
      - |
        echo "Current version: {{.RELEASE_VERSION}}"
        echo "From file: versions.txt"



  # Release Management (Go-based, no shell scripts)
  release:
    desc: Push commits and current tag to origin to trigger automatic GitHub Actions release
    cmds:
      - |
        echo "ðŸš€ Pushing to GitHub..."
        echo "ðŸ“¤ Pushing commits..."
        git push origin main
        if ! git rev-parse "v{{.RELEASE_VERSION}}" >/dev/null 2>&1; then
          echo "ðŸ”– Creating tag v{{.RELEASE_VERSION}}..."
          git tag v{{.RELEASE_VERSION}}
        else
          echo "ðŸ”– Tag v{{.RELEASE_VERSION}} already exists."
        fi
        echo "ðŸ“¤ Pushing current tag v{{.RELEASE_VERSION}}..."
        git push origin v{{.RELEASE_VERSION}}
        echo "âœ… Commits and tag pushed!"
        echo ""
        echo "ðŸš€ GitHub Actions will automatically trigger the release workflow"

  setup:npm-publisher:
    desc: Install goreleaser-npm-publisher globally
    cmds:
      - |
        if ! command -v goreleaser-npm-publisher &> /dev/null; then
          echo "ðŸ“¦ Installing @muthuishere/goreleaser-npm-publisher..."
          npm install -g @muthuishere/goreleaser-npm-publisher
        else
          echo "âœ… goreleaser-npm-publisher already installed"
        fi

  publish:
    desc: Publish to GitHub  NPM (used by both local and CI)
    deps: [build:all, setup:npm-publisher]
    cmds:
      - |
        echo "ðŸš€ Running release with GoReleaser..."
        export GITHUB_TOKEN="{{.GORELEASER_GITHUB_TOKEN}}"
        goreleaser release --clean
      - |
        echo "ðŸ“¦ Building NPM package..."
        goreleaser-npm-publisher build
      - |
        echo "ðŸ“¦ Publishing to NPM..."
        goreleaser-npm-publisher publish --clean --token {{.NPM_TOKEN}}

  create-secrets:
    desc: Create GitHub secrets from .env file
    cmds:
      - |
        export GITHUB_REPO="{{.GITHUB_REPO}}"
        export GITHUB_ENVIRONMENT="{{.GITHUB_SECRET_ENVIRONMENT}}"
        go run secrets.go .env